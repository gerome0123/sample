user                            nginx;
daemon                          off;
worker_processes                2;
# Add stdout logging
error_log                       /dev/stdout warn;

events {
    worker_connections          1024;
    accept_mutex                off;
}

http {
    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
        '$status $body_bytes_sent "$http_referer" '
        '"$http_user_agent" "$http_x_forwarded_for"';

    access_log                     /dev/stdout main;

    root                           /var/webroot;
    #gzip                          on;
    #gzip_min_length               100;
    #gzip_proxied                  expired no-cache no-store private auth;
    #gzip_types                    text/plain application/xml text/css application/x-javascript text/javascript application/javascript;
    #gzip_disable                  "MSIE [1-6]\.";
    server_names_hash_bucket_size 128;

    add_header                  X-Powered-By      CDTechnologiesAsia;

    tcp_nopush                  on;
    tcp_nodelay                 off;
    ssl_session_cache           shared:SSL:50m;
    ssl_session_timeout         1d;
    ssl_protocols               TLSv1 TLSv1.1 TLSv1.2;
    ssl_session_tickets off;

    underscores_in_headers      on;
    types_hash_max_size         2048;
    include                     mime.types;
    default_type                application/octet-stream;

    client_max_body_size        250m;

    sendfile                    on;
    keepalive_timeout           65;

    map $http_upgrade $connection_upgrade {
        default Upgrade;
        '' close;
    }

    server {
        listen                  80;

        location /.well-known/acme-challenge/ {
            # Set correct content type. According to this:
            # https://community.letsencrypt.org/t/using-the-webroot-domain-verification-method/1445/29
            # Current specification requires "text/plain" or no content header at all.
            # It seems that "text/plain" is a safe option.
            default_type "text/plain";

            # This directory must be the same as in /etc/letsencrypt/cli.ini
            # as "webroot-path" parameter. Also don't forget to set "authenticator" parameter
            # there to "webroot".
            # Do NOT use alias, use root! Target directory is located here:
            # /var/www/common/letsencrypt/.well-known/acme-challenge/
            root /var/webroot/letsencrypt;
        }

        if ($request_uri !~ ^/.well-known/acme-challenge/.*$) {
            rewrite ^(.*) https://$host$1 permanent;
        }
    }

    server {
        listen                    443;
        ssl                       on;
        ssl_ciphers               'ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:DHE-DSS-AES128-GCM-SHA256:kEDH+AESGCM:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA:ECDHE-ECDSA-AES128-SHA:ECDHE-RSA-AES256-SHA384:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA:ECDHE-ECDSA-AES256-SHA:DHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA:DHE-DSS-AES128-SHA256:DHE-RSA-AES256-SHA256:DHE-DSS-AES256-SHA:DHE-RSA-AES256-SHA:AES128-GCM-SHA256:AES256-GCM-SHA384:AES128-SHA256:AES256-SHA256:AES128-SHA:AES256-SHA:AES:CAMELLIA:DES-CBC3-SHA:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!aECDH:!EDH-DSS-DES-CBC3-SHA:!EDH-RSA-DES-CBC3-SHA:!KRB5-DES-CBC3-SHA';
        ssl_prefer_server_ciphers on;
        ssl_dhparam               /etc/ssl/localcerts/dhparam.pem;
        ssl_certificate_key       /etc/ssl/localcerts/default.key;
        ssl_certificate           /etc/ssl/localcerts/default.crt;

        # OCSP Stapling
        #ssl_stapling on;
        #ssl_stapling_verify on;
        #resolver 8.8.8.8 8.8.4.4 valid=300s;
        #resolver_timeout 5s;

        location /.well-known/acme-challenge/ {
            # Set correct content type. According to this:
            # https://community.letsencrypt.org/t/using-the-webroot-domain-verification-method/1445/29
            # Current specification requires "text/plain" or no content header at all.
            # It seems that "text/plain" is a safe option.
            default_type "text/plain";

            # This directory must be the same as in /etc/letsencrypt/cli.ini
            # as "webroot-path" parameter. Also don't forget to set "authenticator" parameter
            # there to "webroot".
            # Do NOT use alias, use root! Target directory is located here:
            # /var/www/common/letsencrypt/.well-known/acme-challenge/
            root /var/webroot/letsencrypt;
        }

        if ($http_host ~ ^www\.(.*)$) {
            return 301 $scheme://$1$request_uri;
        }

        client_max_body_size    250m;

        # redirect on errors
        error_page              500 502 503 504 /i/50x.htm;
        error_page              400 403 404 /i/40x.htm;

        # handle default pages
        location /i/ {
            alias /var/webroot/;
        }

        location / {
            # Next three lines implement websocket support
            proxy_http_version 1.1;
            proxy_set_header        Upgrade $http_upgrade;
            proxy_set_header        Connection $connection_upgrade;
            proxy_set_header        X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header        Host $http_host;
            proxy_set_header        X-Forwarded-Proto https;
            proxy_redirect          off;
            proxy_pass              {{ .Env.WWW_URL }};
            proxy_intercept_errors  on;
            break;
        }

        location ^~ /assets/ {
            gzip_static on;
            expires max;
            add_header Cache-Control public;
        }

        location ^~ /ckeditor_assets/ {
            gzip_static on;
            expires max;
            add_header Cache-Control public;
        }

        location ^~ /system/ {
            gzip_static on;
            expires max;
            add_header Cache-Control public;
        }

        pagespeed on;

        # Needs to exist and be writable by nginx.  Use tmpfs for best performance.
        pagespeed FileCachePath /var/ngx_pagespeed_cache;

        # Ensure requests for pagespeed optimized resources go to the pagespeed handler
        # and no extraneous headers get set.
        location ~ "\.pagespeed\.([a-z]\.)?[a-z]{2}\.[^.]{10}\.[^.]+" {
            add_header "" "";
        }
        location ~ "^/pagespeed_static/" { }
        location ~ "^/ngx_pagespeed_beacon$" { }

        pagespeed XHeaderValue "";
        more_clear_headers x-page-speed;
    }

    server {
        # metrics
        listen   8559;
        location /status {
            stub_status on;
            access_log   off;
            allow 127.0.0.1;
            deny all;
        }
    }

    # don't send the nginx version number in error pages and Server header
    server_tokens off;
    include /etc/nginx/conf.d/*.conf;
}